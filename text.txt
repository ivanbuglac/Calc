вот мой код 
import React, { useContext } from 'react'
import materialsData from '../Data/data.json'
import configData from '../Data/config.json'
import { DataContext } from '../../DataContext'
import './inputData.scss'

function InputData() {
	const { selectedData, setSelectedData } = useContext(DataContext)

	const handleMaterialChange = (type, value) => {
		const selectedItem = materialsData.find(item => item.name === value)

		if (!selectedItem) {
			console.warn('Материал не найден в materialsData:', value)
			return
		}

		console.log('Выбранный элемент:', selectedItem) // Для отладки

		const fixItem = configData.find(
			item => item.type === 'fix' && item.key === selectedItem.type
		)

		setSelectedData(prev => {
			console.log('Предыдущее состояние:', prev) // Для отладки
			return {
				...prev,
				[type]: selectedItem.name,
				[${type}Price]: selectedItem.price,
				[${type}Unit]: selectedItem.unit,
				materialType: selectedItem.type, // Здесь должно устанавливаться значение типа материала
				fixValue: fixItem ? fixItem.value : 0,
			}
		})
	}

	const handleRangeChange = (key, value) => {
		setSelectedData(prev => ({ ...prev, [key]: value }))
	}

	const handleStrengthChange = event => {
		setSelectedData(prev => ({ ...prev, strength: event.target.value }))
	}

	return (
		<div className='material'>
			<h2>Выберите материал</h2>
			<div className='material__select_type'>
				{['plastic', 'metal'].map(materialType => (
					<div key={materialType}>
						<h3>{materialType === 'plastic' ? 'Пластик' : 'Металл'}</h3>
						{materialsData
							.filter(item => item.material === materialType)
							.map((item, index) => (
								<label key={index}>
									<input
										type='radio'
										name='material'
										value={item.name}
										checked={selectedData.material === item.name}
										onChange={() => handleMaterialChange('material', item.name)}
									/>
									{item.name}
								</label>
							))}
					</div>
				))}
			</div>
			<div>
				<h3>Трубы</h3>
				{materialsData.filter(item => item.type === 'pipe').length > 0 ? (
					materialsData
						.filter(item => item.type === 'pipe')
						.map((item, index) => (
							<label key={index}>
								<input
									type='radio'
									name='pipe'
									value={item.name}
									onChange={() => handleMaterialChange('pipe', item.name)}
								/>
								{item.name}
							</label>
						))
				) : (
					<p>Нет доступных труб.</p>
				)}
			</div>

			<h2>Введите данные:</h2>
			<div>
				<label>
					{configData.find(item => item.key === 'length')?.name}:{' '}
					{selectedData.length} м
					<input
						type='range'
						min={configData.find(item => item.key === 'length')?.min || 0}
						max={configData.find(item => item.key === 'length')?.max || 0}
						step={configData.find(item => item.key === 'length')?.step || 1}
						value={selectedData.length}
						onChange={e => handleRangeChange('length', e.target.value)}
					/>
				</label>
			</div>
			<div>
				<label>
					{configData.find(item => item.key === 'width')?.name}:{' '}
					{selectedData.width} м
					<input
						type='range'
						min={configData.find(item => item.key === 'width')?.min || 0}
						max={configData.find(item => item.key === 'width')?.max || 0}
						step={configData.find(item => item.key === 'width')?.step || 1}
						value={selectedData.width}
						onChange={e => handleRangeChange('width', e.target.value)}
					/>
				</label>
			</div>
			<h3>Выберите прочность:</h3>
			<div className='material__select_strength'>
				{configData
					.filter(item => item.type === 'frame')
					.map(item => (
						<label key={item.key}>
							<input
								type='radio'
								name='strength'
								value={item.key}
								checked={selectedData.strength === item.key}
								onChange={handleStrengthChange}
							/>
							{item.name}
						</label>
					))}
			</div>
		</div>
	)
}

export default InputData
 
import './App.scss'
import Footer from './components/Footer/Footer'
import Header from './components/Header/Header'
import InputData from './components/inputData/inputData'
import Result from './components/ResultData/Result'
import { DataProvider } from './DataContext'

function App() {
	return (
		<DataProvider>
			<Header />
			<div className='content'>
				<InputData />
				<Result />
			</div>
			<Footer />
		</DataProvider>
	)
}

export default App
 
import React, { useContext } from 'react'
import { DataContext } from '../../DataContext'
import materialsData from '../Data/data.json'
import configData from '../Data/config.json'
import './result.scss'

function Result() {
	const { selectedData, resetResults } = useContext(DataContext)

	const calculateMaterialTotal = () => {
		const material = materialsData.find(
			item => item.name === selectedData.material
		)
		if (!material) return { quantity: 0, total: 0, sheetCount: 0 }

		const area = (selectedData.length || 0) * (selectedData.width || 0)
		const sheetWidth = material.width || 1
		const sheetArea = sheetWidth
		const sheetCount = Math.ceil(area / sheetArea)
		const total = sheetCount * (material.price || 0)

		return { quantity: area.toFixed(2), total: total.toFixed(2), sheetCount }
	}

	const calculatePipeTotal = () => {
		const pipe = materialsData.find(item => item.name === selectedData.pipe)
		if (!pipe) return { quantity: 0, total: 0 }

		const stepConfig =
			configData.find(
				item => item.type === 'frame' && item.key === selectedData.strength
			)?.step || 1
		const pipeWidthMeters = (pipe.width || 0) / 1000
		const distanceBetweenTubes = stepConfig - pipeWidthMeters

		const length = parseFloat(selectedData.length) || 0
		const width = parseFloat(selectedData.width) || 0

		const pipesAlongLength = Math.ceil(length / distanceBetweenTubes)
		const pipesAlongWidth = Math.ceil(width / distanceBetweenTubes)

		const totalPipeLength = pipesAlongLength * width + pipesAlongWidth * length
		const total = totalPipeLength * (pipe.price || 0)

		return { quantity: totalPipeLength.toFixed(2), total: total.toFixed(2) }
	}

	const calculateFixTotal = () => {
		const materialType = selectedData.materialType
		const fixConfig = configData.find(
			item => item.type === 'fix' && item.key === materialType
		)

		const screwPrice =
			materialsData.find(item => item.name === 'Саморез')?.price || 0

		if (!fixConfig) {
			console.warn(
				Не удалось найти конфигурацию для материала: ${materialType}
			)
			return { quantity: 0, total: 0 }
		}

		const area =
			(parseFloat(selectedData.length) || 0) *
			(parseFloat(selectedData.width) || 0)
		const screwsPerSquareMeter = fixConfig.value
		const quantity = area * screwsPerSquareMeter

		const total = quantity * screwPrice

		return { quantity: quantity.toFixed(2), total: total.toFixed(2) }
	}

	const materialTotal = calculateMaterialTotal()
	const pipeTotal = calculatePipeTotal()
	const fixTotal = calculateFixTotal()
	const grandTotal = (
		parseFloat(materialTotal.total) +
		parseFloat(pipeTotal.total) +
		parseFloat(fixTotal.total)
	).toFixed(2)

	return (
		<div className='result'>
			<h2>Результаты:</h2>
			<table>
				<thead>
					<tr>
						<th>Наименование</th>
						<th>Ед.</th>
						<th>Кол-во</th>
						<th>Сумма</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>{selectedData.material || 'Не выбрано'}</td>
						<td>м²</td>
						<td>{materialTotal.quantity}</td>
						<td>{materialTotal.total} руб.</td>
					</tr>
					<tr>
						<td>{selectedData.pipe || 'Не выбрано'}</td>
						<td>мп</td>
						<td>{pipeTotal.quantity}</td>
						<td>{pipeTotal.total} руб.</td>
					</tr>
					<tr>
						<td>Саморезы</td>
						<td>шт</td>
						<td>{fixTotal.quantity}</td>
						<td>{fixTotal.total} руб.</td>
					</tr>
				</tbody>
			</table>
			<div className='result-actions'>
				<button onClick={resetResults}>Сбросить результаты</button>
			</div>
			<div className='total'>
				<p>Итог:</p>
				<span>{grandTotal} руб.</span>
			</div>
		</div>
	)
}

export default Result
 
import React, { createContext, useState } from 'react'

export const DataContext = createContext()

export const DataProvider = ({ children }) => {
	const initialData = {
		material: '',
		pipe: '',
		fix: '',
		length: 0,
		width: 0,
		strength: '',
		fixValue: 0,
		frameType: '',
		materialType: '',
	}

	const [selectedData, setSelectedData] = useState(initialData)

	const resetResults = () => {
		setSelectedData(initialData)
	}

	return (
		<DataContext.Provider
			value={{ selectedData, setSelectedData, resetResults }}
		>
			{children}
		</DataContext.Provider>
	)
}

data.json 
[
	{
		"type": "list",
		"name": "Лист-1 0.5 ширина 1.8м",
		"material": "plastic",
		"unit": "м2",
		"width": 1.8,
		"price": 12
	},

	{
		"type": "list",
		"name": "Лист-2 0.5 ширина 1.5м",
		"material": "plastic",
		"unit": "м2",
		"width": 1.5,
		"price": 15
	},

	{
		"type": "list",
		"name": "Лист-3 0.5 ширина 1.2м",
		"material": "plastic",
		"unit": "м2",
		"width": 1.2,
		"price": 15
	},

	{
		"type": "list",
		"name": "Лист-4 0.7 ширина 1.8м",
		"material": "plastic",
		"unit": "м2",
		"width": 1.8,
		"price": 17
	},
	{
		"type": "list",
		"name": "Лист-5 0.7 ширина 1.5м",
		"material": "plastic",
		"unit": "м2",
		"width": 1.5,
		"price": 20
	},
	{
		"type": "list",
		"name": "Лист-6 0.7 ширина 1.2м",
		"material": "plastic",
		"unit": "м2",
		"width": 1.2,
		"price": 22
	},

	{
		"type": "list",
		"name": "Лист-7 0.3 ширина 1м",
		"material": "metal",
		"unit": "м2",
		"width": 1,
		"price": 25
	},
	{
		"type": "list",
		"name": "Лист-8 0.3 ширина 0.75м",
		"material": "metal",
		"unit": "м2",
		"width": 0.75,
		"price": 20
	},
	{
		"type": "list",
		"name": "Лист-9 0.3 ширина 0.5м",
		"material": "metal",
		"unit": "м2",
		"width": 0.5,
		"price": 15
	},
	{
		"type": "list",
		"name": "Лист-10 0.5 ширина 1м",
		"material": "metal",
		"unit": "м2",
		"width": 1,
		"price": 30
	},
	{
		"type": "list",
		"name": "Лист-11 0.5 ширина 0.75м",
		"material": "metal",
		"unit": "м2",
		"width": 0.75,
		"price": 26
	},
	{
		"type": "list",
		"name": "Лист-12 0.5 ширина 0.5м",
		"material": "metal",
		"unit": "м2",
		"width": 0.5,
		"price": 22
	},

	{
		"type": "pipe",
		"name": "Труба 20х20",
		"unit": "мп",
		"width": 20,
		"price": 18
	},
	{
		"type": "pipe",
		"name": "Труба 30х30",
		"unit": "мп",
		"width": 30,
		"price": 18
	},

	{
		"type": "fix",
		"name": "Саморез",
		"unit": "шт",
		"price": 1.1
	}
]

config.json 

[
	{
		"type": "size",
		"key": "length",
		"name": "Длина",
		"min": 5,
		"max": 50,
		"step": 0.2
	},
	{
		"type": "size",
		"key": "width",
		"name": "Ширина",
		"min": 5,
		"max": 25,
		"step": 0.2
	},
	{
		"type": "frame",
		"key": "light",
		"name": "Легкая",
		"step": 1.2
	},
	{
		"type": "frame",
		"key": "standard",
		"name": "Стандартная",
		"step": 1
	},
	{
		"type": "frame",
		"key": "strong",
		"name": "Усиленная",
		"step": 0.8
	},

	{
		"type": "material",
		"key": "metal",
		"name": "Метал"
	},
	{
		"type": "material",
		"key": "plastic",
		"name": "Пластик"
	},
	{
		"type": "fix",
		"key": "plastic",
		"name": "Штук на кв. метр для пластиковых листов",
		"value": 10
	},
	{
		"type": "fix",
		"key": "metal",
		"name": "Штук на кв. метр для металлических листов",
		"value": 5
	}
]